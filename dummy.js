importReactfrom'react';
import{Col,Grid,Row}from'react-bootstrap';
importNavMenufrom'./menu/Nav/index';
importLeftMenufrom'./menu/left/index';
exportdefaultprops=>(
<div>
<NavMenu/>
<LeftMenu/>
<Gridfluid>
<divclassName='emptytop'></div>
<Colsm={2}>
</Col>
<Colsm={8}>
{props.children}
</Col>
</Grid>
</div>
);
importReact,{Component}from"react";
import{render}from"react-dom";
importFormfrom"react-jsonschema-form";
import_from'lodash';
//constForm=JSONSchemaForm.default;

constoriginalSchema={
title:'Vessel1301',
type:'object',
properties:{
IsRoot:{
type:'boolean',
title:'Equipmentisthesystemroot?'
},
pressureSystemType:{
type:'string',
title:'PressureSystemType',
enum:['GEN','FRA','VAP','TWO','UTIL'],
enumNames:['GeneralProcess','Fractionator','Vapor-PhaseReactor','Two-PhaseReactor','Utility']
},
generalProcess:{
type:"object",
title:"GeneralProcess",
properties:{
GeneralProcessType:{
type:'string',
title:'Systemtype',
enum:['STR','WAT','COO','AIR','OTH'],
enumNames:['StreamSystems','WaterSystems','CoolingSystems','Air/NitrogenSystems','OtherSystems']
}
}
},
fractionator:{
type:"object",
title:"GeneralProcess",
properties:{
FractionatorType:{
type:'string',
title:'Systemtype',
enum:['STR','WAT','COO','AIR','OTH'],
enumNames:['StreamSystems','WaterSystems','CoolingSystems','Air/NitrogenSystems','OtherSystems']
}
}
},
vaporPhaseReactor:{
type:"object",
title:"Vapor-PhaseReactor",
properties:{
VaporPhaseReactorType:{
type:'string',
title:'Systemtype',
enum:['STR','WAT','COO','AIR','OTH'],
enumNames:['StreamSystems','WaterSystems','CoolingSystems','Air/NitrogenSystems','OtherSystems']
}
}
},
twoPhaseReactor:{
type:"object",
title:"Two-PhaseReactor",
properties:{
TwoPhaseReactor:{
type:'string',
title:'Systemtype',
enum:['STR','WAT','COO','AIR','OTH'],
enumNames:['StreamSystems','WaterSystems','CoolingSystems','Air/NitrogenSystems','OtherSystems']
}
}
},
utility:{
type:"object",
title:"Utility",
properties:{
UtilityType:{
type:'string',
title:'Systemtype',
enum:['GEN','FRA','VAP','TWO','UTIL'],
enumNames:['Utilitysystemtype','Fractionator','Vapor-PhaseReactor','Two-PhaseReactor','Utility']
},
UtilitySubType:{
type:'string',
title:'SubType',
enum:['PLA','INS','NIT'],
enumNames:['PlantAir','InstrumentAir','Nitrogen']
}
}
},
notRoot:{
type:"object",
title:"Root",
properties:{
RootEquipmentType:{
type:'string',
title:'RootEquipmentType',
enum:['VES','SIDE','TUBE','AIR','FIR','SIDE1','SIDE2','MIS'],
enumNames:['Vessel','Shell&Tube-ShellSide','Shell&Tube-TubeSide','AirCooledExchanger','FiredHeater','OtherExch.-Side1','OtherExch.-Side2','Miscellaneous']
},
EquipmentAttachedType:{
type:'string',
title:'RootEquipmentNumber',
enum:['3801','3802','3802A','3803','3801A'],
enumNames:['3801','3802','3802A','3803','3803A']
},
NotMitigatedRootType:{
type:'string',
title:'Aretheresourcesofover-pressurethatarenotmitigatedbythesystemroot?',
enum:['YES','NO'],
enumNames:['Yes','No']
}
}
},
noroot:{
type:"object",
title:"RootEquipment",
properties:{
UtilityType:{
type:'string',
title:'RootEquipmentType',
enum:['GEN','FRA','VAP','TWO','UTIL'],
enumNames:['Utilitysystemtype','Fractionator','Vapor-PhaseReactor','Two-PhaseReactor','Utility']
},
anotherroot:{
type:'boolean',
title:'Aretheresourcesofover-pressurethatarenotmitigatedbythesystemroot?',

}
}
},
IsFire:{
title:'Equipmentiswithinthefireheight?',
type:'string',
enum:['YES','NO'],
enumNames:['YES','NO']
},
vapor:{
type:'string',
title:'Isthereavaporoutletthatcanbeblockedin?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
liquid:{
type:'string',
title:'Istherealiquidoutletthatcanbeblockedin?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
pressured:{
type:'string',
title:'Feedispressuredinfromaprocesssource?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
pump:{
type:'string',
title:'Feedispumpedin?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
liquid_Vapor:{
type:'string',
title:'Liquid/vaporproductsarepumpedtoahigherpressuredestination?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
shell_Tube:{
type:'string',
title:'Areshell-and-tubeexchangersattachedtothesystem?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
exchangers:{
type:'string',
title:'Areotherexchangersattachedtothesystem?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
utilities:{
type:'string',
title:'Areanyutilitiesconnectedtothesystem?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
external_Fire:{
type:'string',
title:'Externalfire',
enum:['PRV','OPN'],
enumNames:['PRV','OpenVenttoAtm./Relief']
},
cool_Process:{
type:'string',
title:'Arethereanyexchangersupstreamthatcooltheprocess?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
equipment:{
type:'string',
title:'Areanyutilitiesconnectedtothisequipment?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
pressure:{
type:'string',
title:'AlternateDesignPressure'
},
temperature:{
type:'string',
title:'AlternateDesignTemperature'
},
description:{
type:'string',
title:'Description'
},
equipmentWithinFire:{
type:'string',
title:'Equipmentiswithinthefireheight?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
vaporBlocked:{
type:'string',
title:'Isthereavaporoutletthatcanbeblockedin?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
liquidBlocked:{
type:'string',
title:'Istherealiquidoutletthatcanbeblockedin?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
portequipment:{
type:'string',
title:'Forstaticheadcalcs,useliquiddensityfromwhichportonthisequipment?',
enum:['P1','P2','P3'],
enumNames:['Port1','Port2','Port3']
},
pressureHydraulics:{
type:'string',
title:'Calculatedesignpressurefromhydraulicstosystemroot?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
pressureHeadRoot:{
type:'string',
title:'Calculatedesignpressurefromstaticheadtosystemroot?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
pressureHeadAlternate:{
type:'string',
title:'Calculatedesignpressurefromstaticheadtoalternateequipment?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
pressureMarginMinRoot:{
type:'string',
title:'Minimumpressuremarginabovesystemrootdesignpressure',
enum:['YES','NO'],
enumNames:['YES','NO']
},
pressureMarginAddRoot:{
type:'string',
title:'Additionalpressuremarginabovesystemrootdesignpressure',
enum:['YES','NO'],
enumNames:['YES','NO']
},
exchangersUpstream:{
type:'string',
title:'Arethereanyexchangersupstreamthatcooltheprocess?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
utilitiesConnected:{
type:'string',
title:'Areanyutilitiesconnectedtothisequipment?',
enum:['YES','NO'],
enumNames:['YES','NO']
},
}
};
constoriginalUISchema={
'ui:order':['IsRoot','pressureSystemType','noroot','generalProcess','fractionator','vaporPhaseReactor','twoPhaseReactor','utility','notRoot',
'IsFire','vapor','liquid','pressured','pump','liquid_Vapor','shell_Tube','exchangers','utilities','external_Fire',
'cool_Process','equipment','pressure','temperature','description','equipmentWithinFire','vaporBlocked','liquidBlocked',
'portequipment','pressureHydraulics','pressureHeadRoot','pressureHeadAlternate','pressureMarginMinRoot','pressureMarginAddRoot',
'exchangersUpstream','utilitiesConnected'],
exchangersUpstream:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
utilitiesConnected:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
portequipment:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
pressureHydraulics:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
pressureHeadRoot:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
pressureHeadAlternate:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
pressureMarginMinRoot:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
pressureMarginAddRoot:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
vaporBlocked:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
liquidBlocked:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
IsRoot:{
'ui:widget':'radio',
'ui:options':{
inline:true
},
classNames:'col-xs-12'
},
pressureSystemType:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
notRoot:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
generalProcess:{
//Showstateoptionsonlyif"US"wasselected
condition:'pressureSystemType=GEN',
classNames:'col-xs-6'
},
fractionator:{
//Showstateoptionsonlyif"US"wasselected
condition:'pressureSystemType=FRA',
classNames:'col-xs-6'
},
vaporPhaseReactor:{
//Showstateoptionsonlyif"US"wasselected
condition:'pressureSystemType=VAP',
classNames:'col-xs-6'
},
twoPhaseReactor:{
//Showstateoptionsonlyif"US"wasselected
condition:'pressureSystemType=TWO',
classNames:'col-xs-6'
},
utility:{
//Showstateoptionsonlyif"US"wasselected
condition:'pressureSystemType=UTIL',
classNames:'col-xs-6'
},
noroot:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=n',
classNames:'col-xs-6',
anotherroot:{
'ui:widget':'radio',
'ui:options':{
inline:true
},
classNames:'col-xs-6',
},
UtilityType:{
classNames:'col-xs-6',
}
},
IsFire:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
vapor:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
liquid:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
pressured:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
pump:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
liquid_Vapor:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
shell_Tube:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
exchangers:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
utilities:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
external_Fire:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
equipmentWithinFire:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=false',
classNames:'col-xs-6'
},
cool_Process:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
equipment:{
//Showstateoptionsonlyif"US"wasselected
condition:'IsRoot=true',
classNames:'col-xs-6'
},
pressure:{
//Showstateoptionsonlyif"US"wasselected
classNames:'col-xs-6'
},
temperature:{
//Showstateoptionsonlyif"US"wasselected
classNames:'col-xs-6'
},
description:{
//Showstateoptionsonlyif"US"wasselected
classNames:'col-xs-6'
},
};
constoriginalFormData={};

//Processtheinitialstatefortheform.
//Withoutthisstep,allfieldswouldbeshowninitially.
constinitialState=processForm(originalSchema,originalUISchema,originalSchema,originalUISchema,originalFormData);

//constForm=JSONSchemaForm.default;

classMyCompextendsReact.Component{
constructor(props){
super(props);
this.state=initialState;
}

handleChange(data){
constschema={...this.state.schema};
constuiSchema={...this.state.uiSchema};
const{formData}=data;

constnewState=processForm(originalSchema,originalUISchema,schema,uiSchema,formData);

this.setState(newState);
}

render(){
return(
<div>
<Formschema={this.state.schema}uiSchema={this.state.uiSchema}formData={this.state.formData}onChange={this.handleChange.bind(this)}/>

</div>);
}
}
//**
//*CalculatenewstateforformbasedonUISchemafieldconditionsandcurrentformdata
//*
//*@paramoriginalSchema-Originalfullschemacontainingallpossiblefields
//*@paramoriginalUISchema-OriginalfullUISchemacontainingallpossiblefields
//*@paramschema-Currentschema
//*@paramuiSchema-CurrentUIschema
//*@paramformData-Currentformdata
//*@return{object}-Objectcontainingnewschema,uiSchema,andformData
//*/
functionprocessForm(originalSchema,originalUISchema,schema,uiSchema,formData){
letnewSchema,newUISchema,newFormData;

letconditionalFields=_.pickBy(uiSchema,(field)=>field.hasOwnProperty('condition'));

if(_.isEmpty(conditionalFields)){
return{
schema,
uiSchema,
formData
};
}

newSchema=_.assign({},schema);
newUISchema=_.assign({},uiSchema);
newFormData=_.assign({},formData);

_.each(conditionalFields,(dependantSchema,dependant)=>{
const{rules,allHaveToMatch}=getConditionRules(dependantSchema.condition);
letmatches=[];
_.each(rules,(rule)=>{
const{field,values:stringValues,invert}=getConditionRule(rule);
letvisible=invert;

constvalues=stringValues.map(value=>{
if(value==='true'){
value=true;
}elseif(value==='false'){
value=false;
}
returnvalue;
});

if(field&&newFormData.hasOwnProperty(field)){
letcurrentValues=_.isArray(newFormData[field])
						?newFormData[field]
					:[newFormData[field]];
_.each(values,(value)=>{
if(invert){
visible=visible&&_.indexOf(currentValues,value)===-1;
}
else{
visible=visible||_.indexOf(currentValues,value)!==-1;
}
});
}

matches.push(visible);
});

//Addorremoveconditionalfieldfromschema
letshouldBeVisible=false;
if(matches.length){
shouldBeVisible=allHaveToMatch
	//foo=bar&&bar=foo
				?_.every(matches,Boolean)
	//foo=bar||bar=foo
				:_.some(matches,Boolean);
}

if(shouldBeVisible){
newSchema.properties[dependant]=originalSchema.properties[dependant];
}else{
newSchema.properties=_.omit(newSchema.properties,[dependant]);
newFormData=_.omit(newFormData,[dependant]);
}
});

//UpdateUISchemaUIorder
//react-jsonschema-formcannothandleextrapropertiesfoundinUIorder
newUISchema['ui:order']=_.intersection(
		originalUISchema['ui:order'],
		_.keys(newSchema.properties)
	);
//UpdateSchemarequiredfields
if(originalSchema.hasOwnProperty('required')){
newSchema.required=_.intersection(
			originalSchema.required,
			_.keys(newSchema.properties)
		);
}

return{
schema:newSchema,
uiSchema:newUISchema,
formData:newFormData
};
}

functiongetConditionRules(condition=''){
letrules=[];
letallHaveToMatch=false;
letvisible=false;

//foo=bar||bar=foo
if(condition.indexOf('||')!==-1){
rules=condition.split('||');
allHaveToMatch=false;
visible=false;
}
//foo=bar&&bar=foo
elseif(condition.indexOf('&&')!==-1){
rules=condition.split('&&');
allHaveToMatch=true;
visible=true;
}
//foo=bar
else{
rules=[condition];
allHaveToMatch=true;
visible=true;
}

return{
rules,
allHaveToMatch,
visible
};
}

functiongetConditionRule(conditionRule){
letrule=[]
letinvert;

//foo!=bar
if(conditionRule.indexOf('!=')!==-1){
rule=conditionRule.split('!=');
invert=true;
}
//foo=bar
elseif(conditionRule.indexOf('=')!==-1){
rule=conditionRule.split('=');
invert=false;
}

if(rule.length!==2){
returnfalse;
}

let[field,values]=rule;

values=values.split(',');

return{
field,
values,
invert
};
}
exportdefaultMyComp;





